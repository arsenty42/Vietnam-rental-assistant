import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from '@modelcontextprotocol/sdk/types.js';

// Agent persona configuration
const AGENT_PERSONA = {
  name: "Nam Nguyen",
  username: "@nam_rentalhelper",
  personality: "friendly, helpful, local Vietnamese guy",
  cities: ["Da Nang", "Ho Chi Minh City", "Hanoi"],
  languages: {
    customer: "English",
    vendor: "Vietnamese"
  }
};

// Message templates in Vietnamese for vendors
const VENDOR_TEMPLATES = {
  initial_inquiry: `Ch√†o anh/ch·ªã, b·∫°n m√¨nh l√† ng∆∞·ªùi n∆∞·ªõc ngo√†i mu·ªën thu√™ xe m√°y v√†i ng√†y ·ªü {city}. Anh/ch·ªã c√≥ xe n√†o cho thu√™ kh√¥ng? Gi√° bao nhi√™u m·ªôt ng√†y? C√≥ gi·∫£m gi√° n·∫øu thu√™ 3 ng√†y tr·ªü l√™n kh√¥ng? G·ª≠i gi√∫p m√¨nh v√†i ·∫£nh xe v·ªõi nh√©. C·∫£m ∆°n nhi·ªÅu!`,
  
  follow_up: `Anh/ch·ªã ∆°i, b·∫°n m√¨nh c·∫ßn thu√™ t·ª´ ng√†y {startDate} ƒë·∫øn {endDate}. C√≥ xe n√†o available kh√¥ng? Budget kho·∫£ng {budget} m·ªôt ng√†y. Delivery c√≥ ƒë∆∞·ª£c kh√¥ng?`,
  
  negotiation: `Anh/ch·ªã c√≥ th·ªÉ gi·∫£m gi√° m·ªôt ch√∫t kh√¥ng? B·∫°n m√¨nh thu√™ l√¢u d√†i {days} ng√†y. Gi√° {currentPrice} c√≥ th·ªÉ xu·ªëng {targetPrice} ƒë∆∞·ª£c kh√¥ng?`,
  
  booking_confirm: `OK anh/ch·ªã, b·∫°n m√¨nh ƒë·ªìng √Ω thu√™ xe {model} v·ªõi gi√° {price}/ng√†y t·ª´ {startDate} ƒë·∫øn {endDate}. C·∫ßn gi·∫•y t·ªù g√¨ v√† ƒë·∫∑t c·ªçc bao nhi√™u?`
};

// Customer message templates in English
const CUSTOMER_TEMPLATES = {
  greeting: `Hey! My name is Nam. I'm helping you find a good rental in {city}. I'll check with some rental places and get back to you shortly with options! üòä`,
  
  asking_details: `Hi bro! I need a few details to find you the best deal:
- Which city? (Da Nang, Ho Chi Minh, or Hanoi)
- What dates do you need the bike?
- What's your daily budget? (in VND)
- Any specific type? (scooter, motorbike, automatic/manual)`,
  
  presenting_options: `Found some good options for you in {city}! üèçÔ∏è

Here's what I got:`,
  
  recommendation: `My recommendation: Go with {shopName} - they're reliable and give good prices to foreigners. Want me to book it for you?`
};

// Rental data structure
interface RentalOption {
  city: string;
  shop: string;
  contact: string;
  bikes: Array<{
    model: string;
    pricePerDay: string;
    photo?: string;
    available: boolean;
  }>;
  discount?: string;
  delivery: string;
  requirements: string[];
  rating?: number;
}

// Mock rental database (in real app, this would connect to actual APIs)
const RENTAL_DATABASE: RentalOption[] = [
  {
    city: "Da Nang",
    shop: "Thanh Xe T·ªët",
    contact: "+84901234567",
    bikes: [
      { model: "Honda Vision", pricePerDay: "150,000‚Ç´", available: true },
      { model: "Yamaha Nouvo", pricePerDay: "180,000‚Ç´", available: true },
      { model: "Honda SH", pricePerDay: "250,000‚Ç´", available: false }
    ],
    discount: "10% off for 3+ days",
    delivery: "Yes, within city center",
    requirements: ["Passport copy", "50,000‚Ç´ deposit"],
    rating: 4.5
  },
  {
    city: "Ho Chi Minh City",
    shop: "Saigon Motorbike Rental",
    contact: "+84907654321",
    bikes: [
      { model: "Honda Wave", pricePerDay: "120,000‚Ç´", available: true },
      { model: "Yamaha Exciter", pricePerDay: "200,000‚Ç´", available: true },
      { model: "Honda CBR", pricePerDay: "300,000‚Ç´", available: true }
    ],
    discount: "15% off for 5+ days",
    delivery: "Yes, to hotel/airport",
    requirements: ["International license", "Passport", "100,000‚Ç´ deposit"],
    rating: 4.8
  },
  {
    city: "Hanoi",
    shop: "Hanoi Easy Riders",
    contact: "+84912345678",
    bikes: [
      { model: "Honda Future", pricePerDay: "140,000‚Ç´", available: true },
      { model: "Suzuki Raider", pricePerDay: "160,000‚Ç´", available: true },
      { model: "Kawasaki Ninja", pricePerDay: "350,000‚Ç´", available: false }
    ],
    discount: "20% off for weekly rental",
    delivery: "District 1 and Ba Dinh only",
    requirements: ["Passport copy", "Visa", "200,000‚Ç´ deposit"],
    rating: 4.3
  }
];

class VietnamRentalAssistant {
  
  // Simulate contacting vendors
  async contactVendors(city: string, requirements: any): Promise<RentalOption[]> {
    console.log(`[Nam]: Contacting rental shops in ${city}...`);
    
    // Simulate delay for realistic messaging
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const cityRentals = RENTAL_DATABASE.filter(
      rental => rental.city.toLowerCase() === city.toLowerCase()
    );
    
    return cityRentals;
  }

  // Format rental options for customer
  formatOptionsForCustomer(options: RentalOption[]): string {
    let response = "";
    
    options.forEach((option, index) => {
      response += `\nüè™ **${option.shop}** (Rating: ${option.rating}/5)\n`;
      response += `üìû Contact: ${option.contact}\n`;
      response += `üöö Delivery: ${option.delivery}\n`;
      response += `üí∞ Discount: ${option.discount}\n`;
      response += `üìã Requirements: ${option.requirements.join(', ')}\n`;
      response += `\nüèçÔ∏è Available bikes:\n`;
      
      option.bikes.forEach(bike => {
        const status = bike.available ? "‚úÖ" : "‚ùå";
        response += `   ${status} ${bike.model} - ${bike.pricePerDay}/day\n`;
      });
      response += `\n`;
    });
    
    return response;
  }

  // Generate negotiation strategy
  generateNegotiationTips(options: RentalOption[]): string {
    return `\nüí° **Nam's Local Tips:**
- Ask for weekly rates (usually 20-30% cheaper)
- Mention you're staying long-term for better deals  
- Book directly through me - I can get foreigner-friendly prices
- Avoid tourist areas for pickup (I'll handle delivery)
- Best time to negotiate: weekdays, off-season`;
  }

  // Create booking summary
  createBookingSummary(rental: RentalOption, bikeModel: string, days: number): any {
    const selectedBike = rental.bikes.find(bike => bike.model === bikeModel);
    const dailyPrice = parseInt(selectedBike?.pricePerDay.replace(/[^\d]/g, '') || '0');
    const totalPrice = dailyPrice * days;
    
    return {
      shop: rental.shop,
      contact: rental.contact,
      bike: selectedBike,
      duration: `${days} days`,
      totalPrice: `${totalPrice.toLocaleString()}‚Ç´`,
      requirements: rental.requirements,
      delivery: rental.delivery,
      discount: rental.discount,
      agentNote: "I'll coordinate pickup/delivery and handle all communication with the shop for you!"
    };
  }
}

const assistant = new VietnamRentalAssistant();

// Create MCP server
const server = new Server(
  {
    name: 'vietnam-rental-assistant',
    version: '1.0.0',
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// List available tools
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: 'search_rentals',
        description: 'Search for motorbike/scooter rentals in Vietnamese cities',
        inputSchema: {
          type: 'object',
          properties: {
            city: {
              type: 'string',
              description: 'City name (Da Nang, Ho Chi Minh City, or Hanoi)',
            },
            startDate: {
              type: 'string',
              description: 'Start date for rental (YYYY-MM-DD)',
            },
            endDate: {
              type: 'string',
              description: 'End date for rental (YYYY-MM-DD)',
            },
            budget: {
              type: 'string',
              description: 'Daily budget in VND (e.g., "150000")',
            },
            bikeType: {
              type: 'string',
              description: 'Type of bike (scooter, motorbike, automatic, manual)',
              enum: ['scooter', 'motorbike', 'automatic', 'manual', 'any'],
            },
          },
          required: ['city'],
        },
      },
      {
        name: 'negotiate_price',
        description: 'Negotiate better prices with rental shops',
        inputSchema: {
          type: 'object',
          properties: {
            shopName: {
              type: 'string',
              description: 'Name of the rental shop',
            },
            currentPrice: {
              type: 'string',
              description: 'Current quoted price per day',
            },
            targetPrice: {
              type: 'string',
              description: 'Desired price per day',
            },
            days: {
              type: 'number',
              description: 'Number of rental days',
            },
          },
          required: ['shopName', 'currentPrice', 'targetPrice', 'days'],
        },
      },
      {
        name: 'book_rental',
        description: 'Book a specific rental and coordinate with vendor',
        inputSchema: {
          type: 'object',
          properties: {
            shopName: {
              type: 'string',
              description: 'Name of the rental shop',
            },
            bikeModel: {
              type: 'string',
              description: 'Selected bike model',
            },
            startDate: {
              type: 'string',
              description: 'Start date (YYYY-MM-DD)',
            },
            endDate: {
              type: 'string',
              description: 'End date (YYYY-MM-DD)',
            },
            customerName: {
              type: 'string',
              description: 'Customer name for booking',
            },
            deliveryAddress: {
              type: 'string',
              description: 'Delivery address (hotel/location)',
            },
          },
          required: ['shopName', 'bikeModel', 'startDate', 'endDate', 'customerName'],
        },
      },
      {
        name: 'get_local_tips',
        description: 'Get local Vietnamese tips for renting and riding',
        inputSchema: {
          type: 'object',
          properties: {
            city: {
              type: 'string',
              description: 'City name for localized tips',
            },
            topic: {
              type: 'string',
              description: 'Type of tips needed',
              enum: ['traffic', 'parking', 'fuel', 'police', 'routes', 'safety'],
            },
          },
          required: ['city'],
        },
      },
    ],
  };
});

// Handle tool calls
server.setRequestHandler(CallToolRequestSchema, async (request) => {
  const { name, arguments: args } = request.params;

  try {
    switch (name) {
      case 'search_rentals': {
        const { city, startDate, endDate, budget, bikeType } = args;
        
        console.log(`[Nam]: Looking for rentals in ${city}...`);
        
        const options = await assistant.contactVendors(city, {
          startDate,
          endDate,
          budget,
          bikeType
        });
        
        if (options.length === 0) {
          return {
            content: [
              {
                type: 'text',
                text: `Sorry bro, couldn't find any available rentals in ${city} for your dates. Let me try some other contacts or different dates?`,
              },
            ],
          };
        }
        
        const formattedOptions = assistant.formatOptionsForCustomer(options);
        const tips = assistant.generateNegotiationTips(options);
        
        return {
          content: [
            {
              type: 'text',
              text: `Hey! Found some solid options in ${city}! üèçÔ∏è\n${formattedOptions}${tips}`,
            },
          ],
        };
      }

      case 'negotiate_price': {
        const { shopName, currentPrice, targetPrice, days } = args;
        
        // Simulate negotiation
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        const negotiationResult = Math.random() > 0.3; // 70% success rate
        const finalPrice = negotiationResult 
          ? targetPrice 
          : Math.floor((parseInt(currentPrice.replace(/[^\d]/g, '')) + parseInt(targetPrice.replace(/[^\d]/g, ''))) / 2);
        
        if (negotiationResult) {
          return {
            content: [
              {
                type: 'text',
                text: `Great news! üéâ I managed to negotiate with ${shopName}. They agreed to ${targetPrice}/day for ${days} days. They like dealing with me because I bring them regular customers. Want me to book it?`,
              },
            ],
          };
        } else {
          return {
            content: [
              {
                type: 'text',
                text: `I tried my best with ${shopName}! They can't go as low as ${targetPrice}, but they offered ${finalPrice.toLocaleString()}‚Ç´/day instead. Still a good deal considering it includes delivery. What do you think?`,
              },
            ],
          };
        }
      }

      case 'book_rental': {
        const { shopName, bikeModel, startDate, endDate, customerName, deliveryAddress } = args;
        
        const rental = RENTAL_DATABASE.find(r => r.shop === shopName);
        if (!rental) {
          throw new McpError(ErrorCode.InvalidRequest, `Shop ${shopName} not found`);
        }
        
        const days = Math.ceil((new Date(endDate).getTime() - new Date(startDate).getTime()) / (1000 * 60 * 60 * 24));
        const bookingSummary = assistant.createBookingSummary(rental, bikeModel, days);
        
        // Simulate booking process
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        return {
          content: [
            {
              type: 'text',
              text: `All set! üéâ I've booked your ${bikeModel} with ${shopName}.

üìã **Booking Confirmation:**
- Customer: ${customerName}
- Bike: ${bookingSummary.bike?.model}
- Duration: ${bookingSummary.duration}
- Total: ${bookingSummary.totalPrice}
- Delivery: ${deliveryAddress || 'To be arranged'}

üìû **Next Steps:**
1. Shop will contact you at delivery time
2. Bring: ${bookingSummary.requirements.join(', ')}
3. I'll be available if any issues come up!

The shop owner is my friend, so you'll get good treatment. Ride safe! üèçÔ∏è`,
            },
          ],
        };
      }

      case 'get_local_tips': {
        const { city, topic } = args;
        
        const tips = {
          'Da Nang': {
            traffic: "Traffic is chill compared to Saigon. Watch out for the Dragon Bridge area during weekends - gets crowded with tourists.",
            parking: "Park at hotels or cafes, tip the security guard 5-10k VND. Avoid leaving helmet on bike near beach areas.",
            fuel: "Petrol stations everywhere. About 25k VND per liter. Keep tank above half - some stations close early.",
            police: "Police rarely stop foreigners in Da Nang. If stopped, be polite, show passport and license. They usually just check and let you go.",
            routes: "Coastal road is beautiful but windy. Hai Van Pass is epic but challenging - start early morning.",
            safety: "Wear helmet always! Rain comes suddenly, so bring poncho. Watch for sand on coastal roads."
          }
        };
        
        const cityTips = tips[city as keyof typeof tips] || tips['Da Nang'];
        const specificTip = topic ? cityTips[topic as keyof typeof cityTips] : Object.values(cityTips).join('\n\n');
        
        return {
          content: [
            {
              type: 'text',
              text: `üí° **Nam's Local Tips for ${city}:**\n\n${specificTip}\n\nNeed more specific advice? Just ask! I've been riding here for years.`,
            },
          ],
        };
      }

      default:
        throw new McpError(ErrorCode.MethodNotFound, `Unknown tool: ${name}`);
    }
  } catch (error) {
    console.error('Error in tool execution:', error);
    throw new McpError(ErrorCode.InternalError, `Tool execution failed: ${error}`);
  }
});

// Start server
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error('Vietnam Rental Assistant MCP Server running on stdio');
}

main().catch((error) => {
  console.error('Server failed to start:', error);
  process.exit(1);
});
